[{"id":"e9f22dd8.dca23","type":"tab","label":"uiHotwater2","disabled":false,"info":""},{"id":"6a887b32.c430e4","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":710,"y":1100,"wires":[]},{"id":"a703e38c.52466","type":"link out","z":"e9f22dd8.dca23","name":"home-controls","links":["8b4e270b.e30c08","4a67e1e4.1a194","9f7c86d4.904ca8","3f424063.f4322"],"x":1575,"y":1300,"wires":[]},{"id":"a9faeec9.38264","type":"link in","z":"e9f22dd8.dca23","name":"","links":["bd233da.800a3c","ad4acd57.68938"],"x":1375,"y":1320,"wires":[["a703e38c.52466","ecc3087d.af0128"]]},{"id":"8b4e270b.e30c08","type":"link in","z":"e9f22dd8.dca23","name":"home-replay","links":["e586c1c1.d147b","a703e38c.52466","136f947a.a6ec9c","69eb6996.953358"],"x":255,"y":1240,"wires":[["e18767ef.34a928"]]},{"id":"a82c4f15.8903","type":"link in","z":"e9f22dd8.dca23","name":"","links":["9f1a6fe.421359","22c25e7f.5bc5d2"],"x":1375,"y":1140,"wires":[["971039f0.bdb0e8","cbafac67.4781a"]]},{"id":"e5d7ab8d.85cc68","type":"comment","z":"e9f22dd8.dca23","name":"OUTPUT from UIBuilder BOTTOM","info":"","x":1240,"y":1360,"wires":[]},{"id":"918365b9.5fcc58","type":"comment","z":"e9f22dd8.dca23","name":"OUTPUT from UIBuilder TOP","info":"","x":1260,"y":1100,"wires":[]},{"id":"b4002380.f5af5","type":"link out","z":"e9f22dd8.dca23","name":"","links":["c7521c6.e3213e","24027f6b.e1fc9"],"x":935,"y":1140,"wires":[]},{"id":"c62b95c7.8b5688","type":"comment","z":"e9f22dd8.dca23","name":"INPUT to UIBuilder","info":"","x":1010,"y":1100,"wires":[]},{"id":"bd6e739e.ce8b8","type":"comment","z":"e9f22dd8.dca23","name":"Mod \"data caching\" to return on 1st line","info":"","x":470,"y":1220,"wires":[]},{"id":"d2541d52.5138e","type":"function","z":"e9f22dd8.dca23","name":"Passthrough","func":"msg.page =\"hotwater\"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":730,"y":1160,"wires":[["b4002380.f5af5"]]},{"id":"971039f0.bdb0e8","type":"function","z":"e9f22dd8.dca23","name":"Processing","func":"if (msg.page ==\"hotwater\") \n        {\n        \n        if (msg.type == \"schedule_update\")\n            {\n            var variable    = flow.get(msg.variable_name)\n            variable         = variable.find(variables => variables.hour == msg.hour);\n            variable[msg.mins] = msg.status_update\n            msg = {}\n            msg.cache = true\n            return msg;\n            }\n\n       if (msg.type == \"device_data_update\")\n            {\n            //node.warn(\"up to here now 1st\")\n            var hw_values   = flow.get(msg.variable_name)\n            hw_values[msg.object_position][msg.property] = msg.value\n            //node.warn([\"up to here\",msg.variable_name, hw_values[msg.object_position][msg.property]])\n            msg = {}\n            msg.cache = true\n            return msg;\n            }\n\n            \n        return msg;\n        }\nelse    {return}","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1630,"y":1160,"wires":[["19a12f32.908eb1","77162e65.2d3a5","e18767ef.34a928","f9858bb6.a13108"]]},{"id":"77162e65.2d3a5","type":"function","z":"e9f22dd8.dca23","name":"Scheduler","func":"var time                    = new Date();\nvar hours                   = time.getHours();\nvar mins                    = time.getMinutes();\nvar mins_block              = \"\";\n\nvar boiler_name             = \"Heating Central/B4_Hot Water\";\nvar temp_cylinder_name      = \"Heating Central/Temp Cylinder Supply\";\nvar pump_kitchen_name       = \"Heating Central/Pump - Kitchen\";\nvar temp_kitchen_name       = \"Heating Central/Temp Kitchen Return\";\nvar pump_1stfloor_name      = \"Heating Central/Pump - 1st-Loft\";\nvar temp_1stfloor_name      = \"Heating Central/Temp 1st-Loft Return\";\nvar pump_garden_name        = \"Heating Central/Pump - Garden\";\nvar temp_garden_name        = \"Heating Central/Temp Garden Return\";\nvar pump_master_name        = \"Heating Central/Pump - Master\";\nvar temp_master_name        = \"Heating Central/Temp MasterWC Return\";\nvar HW_Values               = flow.get(\"hw_values\");\nvar delta                   = HW_Values[11].delta_C                               //C delta\nvar pump_max_on_time        = HW_Values[11].max_run_time_pump;                    //seconds\nvar boiler_max_on_time      = HW_Values[11].max_run_time_boilder;                 //seconds\nvar date                    = new Date();\ndate                        = date.getTime();\n\nfunction manage_pump(schedule, hc_pump_name, hc_temp_name, hours, mins)\n        {\n        //retrieve objects for a given pump\n        HW_Values               = flow.get(\"hw_values\");\n        var HW_Pump_Values      = HW_Values.find(HW_Value => HW_Value.device == hc_pump_name);\n        var HW_Temp_Values      = HW_Values.find(HW_Value => HW_Value.device == hc_temp_name);\n        \n        //retireve key values for the pump\n        var pump_status         = HW_Pump_Values.pump_status;\n        var temp_actual         = HW_Temp_Values.actual;\n        var temp_target         = HW_Temp_Values.target;\n\n        //retreive schedule for the pump\n        schedule                     = flow.get(schedule); \n        schedule                     = schedule.find(schedule => schedule.hour == hours);          //retrieve scheduled object for current hour\n        if (mins < 31) {mins_block   = \"status00_30\"} else {mins_block = \"status30_60\"}            //create correct property for schedule object \n        //update punp_schedule status to true/false as per schedule and current time\n        HW_Pump_Values.pump_schedule = schedule[mins_block];                                       \n\n        var stopaftertimer          =  (HW_Pump_Values.run_time.start_time != 0 && ((date - HW_Pump_Values.run_time.start_time)/1000) > pump_max_on_time)? true : false\n        // node.warn([\"stop after one hour = \", stopaftertimer])\n\n        // *********************************************************\n        // ***************** MANUAL OVERRIDE ***********************\n        // *********************************************************\n        var manual_override_time        = HW_Values[11].manual_override_time;                               //override the schedule if manual override have been selected and timer is still active \n        var time_since_override         = HW_Pump_Values.override_status === true?  (date - HW_Pump_Values.override_start_time)/1000 : 100000000;  //calc time since override\n        var override_active             = time_since_override <= manual_override_time?  true : false;       //is override active i.e has the 30 mins timer passed \n        var schedule_status             = override_active? override_active : schedule[mins_block]           //set schedule status for the pump- either override or actual\n        HW_Pump_Values.override_status = override_active? true : false                                      //update override_status of zone\n\n\n        // *********************************************************\n        // **************** TURNING OFF PUMPS **********************\n        // *********************************************************\n        // if temp is too high and pump is on => turn pump off OR  force off if > 52C OR force off if running for more than x minutes\n        if ((temp_actual > (temp_target + delta)) || (temp_actual > 52) || (pump_status === true && schedule_status === false) || (stopaftertimer === true))\n            {\n                if (pump_status === true || temp_actual > 52 || stopaftertimer === true) \n                {\n                    //turn off the pump if on and return temp is > setpoint temp\n                    node.send({\n                        \"topic\"     : hc_pump_name, \n                        \"payload\"   : false,\n                    })\n                    //************* MANAGE TIMERS ***************\n                    timerOff(hc_pump_name)   \n                    // node.warn([\"turning pump off\",hc_pump_name])\n                    //************* MANAGE TIMERS ***************\n                }\n            }\n\n        // *********************************************************\n        // **************** TURNING ON PUMPS **********************\n        // *********************************************************\n        // if pump actual != schedule status => set pump to schedule\n        else if (pump_status != schedule_status && (temp_actual < temp_target))\n            {\n                    //update pump status to schedule requirement i.e. turn on if off and vice-versa\n                    node.send({\n                        \"topic\"     : hc_pump_name, \n                        \"payload\"   : true,\n                    })\n                    //************* MANAGE TIMERS ***************\n                    timerOn(hc_pump_name)  \n                    // node.warn([\"turning pump on\",hc_pump_name])\n                    //************* MANAGE TIMERS ***************\n            }\n        }\n\n\n//retrieve pump status (on/off= true/false)\nfunction device_status(hc_pump_name)\n        {\n        HW_Values               = flow.get(\"hw_values\");\n        var HW_Pump_Values      = HW_Values.find(HW_Value => HW_Value.device == hc_pump_name);\n        return HW_Pump_Values.pump_status;\n        }\n\n\n//manage timer when pump is turning off\nfunction timerOff(hc_pump_name)\n        {\n        //retrieve objects for a given pump     \n        HW_Values               = flow.get(\"hw_values\");\n        var HW_Pump_Values      = HW_Values.find(HW_Value => HW_Value.device == hc_pump_name);\n        \n         //************* MANAGE TIMERS ***************\n        if (HW_Pump_Values.run_time.start_time != 0)\n            {\n            // node.warn([\"made it into OFF1\",hc_pump_name, \"start time = \", HW_Pump_Values.run_time.start_time])\n            //RUN TIME CALCULATE\n            //calculate and store the total run/on time\n            HW_Pump_Values.run_time.time1 = Number(((date - HW_Pump_Values.run_time.start_time)/1000).toFixed(0));\n            HW_Pump_Values.run_time.time1 = HW_Pump_Values.run_time.time1 > 1000000000? 0:HW_Pump_Values.run_time.time1\n            //reset start time \n            HW_Pump_Values.run_time.start_time = 0;\n            // node.warn([\"made it into OFF2\",hc_pump_name, \"start time = \", HW_Pump_Values.run_time.start_time])\n            \n            //OFF TIME - SHIFT\n            //when pump starts move time1-3 to 2-4 -- allowing a space for the new run time to be stored in time1\n            HW_Pump_Values.off_time.time4 = HW_Pump_Values.off_time.time3;\n            HW_Pump_Values.off_time.time3 = HW_Pump_Values.off_time.time2;\n            HW_Pump_Values.off_time.time2 = HW_Pump_Values.off_time.time1;\n            HW_Pump_Values.off_time.time1 = \"\";\n            \n            //OFF TIME - SET START TIME\n            //store the stop time - time when pump has stopped from\n            HW_Pump_Values.off_time.start_time = new Date();\n            HW_Pump_Values.off_time.start_time = HW_Pump_Values.off_time.start_time.getTime();\n            }\n        //************* MANAGE TIMERS ***************           \n        }\n\n\n//manage timer when pump is turning on\nfunction timerOn(hc_pump_name)\n        {\n        //retrieve objects for a given pump     \n        HW_Values               = flow.get(\"hw_values\");\n        var HW_Pump_Values      = HW_Values.find(HW_Value => HW_Value.device == hc_pump_name);\n\n        //************* MANAGE TIMERS ***************\n        //stop fast clicking (changing swchedule temps) causing issues \n        if (HW_Pump_Values.run_time.start_time == 0) \n            {\n            // node.warn([\"made it into ON\",hc_pump_name])\n            //RUN TIME - SHIFT\n            //when pump starts move time1-3 to 2-4 -- allowing a space for the new run time to be stored in time1\n            HW_Pump_Values.run_time.time4 = HW_Pump_Values.run_time.time3;\n            HW_Pump_Values.run_time.time3 = HW_Pump_Values.run_time.time2;\n            HW_Pump_Values.run_time.time2 = HW_Pump_Values.run_time.time1;\n            HW_Pump_Values.run_time.time1 = \"\"; \n            \n            //RUN TIME - SET START TIME \n            //update start time when the pump is first turned on\n            HW_Pump_Values.run_time.start_time = new Date();\n            HW_Pump_Values.run_time.start_time = HW_Pump_Values.run_time.start_time.getTime();\n\n            //OFF TIME - CALCULATE\n            //calculate and store the stop/off time                    \n            HW_Pump_Values.off_time.time1 = Number(((date - HW_Pump_Values.off_time.start_time)/1000).toFixed(0));\n            //reset stop time \n            HW_Pump_Values.off_time.start_time = 0;\n            }\n            //************* MANAGE TIMERS ***************\n        }\n\n\n\n\n//********************************************************************************************************************\n//********* run function to manage pump status (on/off) **************************************************************\n//********************************************************************************************************************\nvar manage_pump_output1  = manage_pump(\"hw_schedule_1stloft\", pump_1stfloor_name,    temp_1stfloor_name,    hours, mins);\nvar manage_pump_output2  = manage_pump(\"hw_schedule_kitchen\", pump_kitchen_name,     temp_kitchen_name,     hours, mins);\nvar manage_pump_output3  = manage_pump(\"hw_schedule_garden\",  pump_garden_name,      temp_garden_name,      hours, mins);\nvar manage_pump_output4  = manage_pump(\"hw_schedule_master\",  pump_master_name,      temp_master_name,      hours, mins);\n//********************************************************************************************************************\n//********* run function to manage pump status (on/off) **************************************************************\n//********************************************************************************************************************\n\n\n\n//********* manage boiler status ************\n//retreive values for input into managing the boiler status (on/off)\nvar pump_1stfloor           = device_status(pump_1stfloor_name);\nvar pump_kitchen            = device_status(pump_kitchen_name);\nvar pump_garden             = device_status(pump_garden_name);\nvar pump_master             = device_status(pump_master_name);\nvar boiler_status           = device_status(boiler_name);\n\nHW_Values                   = flow.get(\"hw_values\");\nvar HW_Cylinder_Values      = HW_Values.find(HW_Value => HW_Value.device == temp_cylinder_name);\nvar cylinder_actual         = Number(HW_Cylinder_Values.actual);\nvar cylinder_target         = Number(HW_Cylinder_Values.target);\nvar HW_Boilder_Values       = HW_Values.find(HW_Value => HW_Value.device == boiler_name);\n\nvar send_msg                = false;\n\nvar stopaftertimer2         =  (HW_Boilder_Values.run_time.start_time != 0 && ((date - HW_Boilder_Values.run_time.start_time)/1000) > boiler_max_on_time)? true : false\n\n//manage boiler status depending on pump status and cylinder supply temp\nif (pump_1stfloor === true  || pump_kitchen === true || pump_garden === true || pump_master === true) \n        {\n        if (boiler_status === false)\n            {\n                if (cylinder_actual < cylinder_target)\n                {\n                node.send({\n                        \"topic\"     : boiler_name, \n                        \"payload\"   : true,\n                        })\n                timerOn(boiler_name) \n                }\n            }\n        else if ((cylinder_actual > (cylinder_target + delta)) || stopaftertimer2 === true)\n                {\n                node.send({\n                        \"topic\"     : boiler_name, \n                        \"payload\"   : false,\n                        })\n                timerOff(boiler_name) \n                }\n        }\n\nelse if (pump_1stfloor === false  && pump_kitchen === false && pump_garden === false && pump_master === false || cylinder_actual > (cylinder_target + delta) || stopaftertimer2 === true)  \n        {\n        if (boiler_status === true)\n            {\n            node.send({\n                    \"topic\"     : boiler_name, \n                    \"payload\"   : false,\n                    })\n                    timerOff(boiler_name) \n            }\n        }\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1100,"y":600,"wires":[["9e0cac18.f6437","3f72a8bc.272f78"]]},{"id":"e9bc0813.8b2328","type":"function","z":"e9f22dd8.dca23","name":"HW Device Values","func":"//Key Values\nflow.set (\"hw_values\",\n            [\n            {device:\"Heating Central/Pump - Kitchen\",           pump_status:false,      pump_schedule:false,    override_start_time:0,    override_status:false,    \n                                                                run_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}, \n                                                                off_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}},\n                                                                \n            {device:\"Heating Central/Temp Kitchen Return\",      actual:20,          target:46},\n\n            {device:\"Heating Central/Pump - Master\",            pump_status:false,      pump_schedule:false,    override_start_time:0,    override_status:false,    \n                                                                run_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}, \n                                                                off_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}},\n                                                                \n            {device:\"Heating Central/Temp MasterWC Return\",     actual:20,          target:43},\n\n            {device:\"Heating Central/Pump - 1st-Loft\",          pump_status:false,      pump_schedule:false,    override_start_time:0,    override_status:false,    \n                                                                run_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}, \n                                                                off_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}},\n                                                                \n            {device:\"Heating Central/Temp 1st-Loft Return\",     actual:20,          target:43},\n\n            {device:\"Heating Central/Pump - Garden\",            pump_status:false,      pump_schedule:false,    override_start_time:0,    override_status:false,    \n                                                                run_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}, \n                                                                off_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}},\n                                                                \n            {device:\"Heating Central/Temp Garden Return\",       actual:20,          target:43},\n\n            {device:\"Heating Central/B4_Hot Water\",             pump_status:false,      pump_schedule:false,    \n                                                                run_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}, \n                                                                off_time:{time1:0, time2:0, time3:0, time4:0, start_time:new Date()}},\n                                                                \n            {device:\"Heating Central/Temp Cylinder Supply\",     actual:20,          target:48},\n            {device:\"Heating Central/Temp Boiler Supply\",       actual:20},\n            {device:\"System_Data\",                              manual_override_time:1800,  max_run_time_pump:600,   max_run_time_boilder:1800, delta_C:3.5},         //seconds = 30 mins\n            ])\n            \n\n//pump_status = \n//actual for pump = pump is actuallly on on/off","outputs":1,"noerr":0,"initialize":"","finalize":"","x":710,"y":80,"wires":[[]]},{"id":"6e8ba9e0.d4f648","type":"inject","z":"e9f22dd8.dca23","name":"Run every 1 minute","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"60","crontab":"","once":true,"onceDelay":"3","topic":"","payload":"","payloadType":"date","x":900,"y":440,"wires":[["77162e65.2d3a5"]]},{"id":"fccd64f7.f83f98","type":"inject","z":"e9f22dd8.dca23","name":"Running this will delete all current device values","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":320,"y":80,"wires":[["e9bc0813.8b2328"]]},{"id":"9e0cac18.f6437","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1310,"y":540,"wires":[]},{"id":"3f72a8bc.272f78","type":"fibaroActor","z":"e9f22dd8.dca23","name":"","deviceID":"0","server":"9c9da376.afac5","events":true,"outputs":2,"x":1330,"y":600,"wires":[[],[]]},{"id":"c3d5fcc5.937ba","type":"function","z":"e9f22dd8.dca23","name":"Update Status","func":"var HW_Values               = flow.get(\"hw_values\");\nHW_Values                   = HW_Values.find(HW_Value => HW_Value.device == msg.topic);\n\nif (HW_Values.pump_status !== undefined) {HW_Values.pump_status = msg.payload} else  {HW_Values.actual = msg.payload}\n\nmsg.payload = {};\nmsg.cache = true\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":760,"y":600,"wires":[["ce0bc9d3.00f0b8","e18767ef.34a928","77162e65.2d3a5"]]},{"id":"76ff6b15.3982a4","type":"function","z":"e9f22dd8.dca23","name":"Pump Schedules","func":"//Schedules\nflow.set (\"hw_schedule_1stloft\",\n            [\n            {hour:\"0\",       status00_30:false,        status30_60:false},\n            {hour:\"1\",       status00_30:false,        status30_60:false},\n            {hour:\"2\",       status00_30:false,        status30_60:false},\n            {hour:\"3\",       status00_30:false,        status30_60:false},\n            {hour:\"4\",       status00_30:false,        status30_60:false},            \n            {hour:\"5\",       status00_30:false,        status30_60:false},            \n            {hour:\"6\",       status00_30:false,        status30_60:false},            \n            {hour:\"7\",       status00_30:false,         status30_60:true},            \n            {hour:\"8\",       status00_30:true,         status30_60:true},            \n            {hour:\"9\",       status00_30:true,         status30_60:false},            \n            {hour:\"10\",      status00_30:false,        status30_60:false},            \n            {hour:\"11\",      status00_30:false,        status30_60:false},            \n            {hour:\"12\",      status00_30:false,        status30_60:false},            \n            {hour:\"13\",      status00_30:false,        status30_60:false},            \n            {hour:\"14\",      status00_30:false,        status30_60:false},            \n            {hour:\"15\",      status00_30:false,        status30_60:false},            \n            {hour:\"16\",      status00_30:false,        status30_60:false},            \n            {hour:\"17\",      status00_30:false,        status30_60:false},            \n            {hour:\"18\",      status00_30:true,         status30_60:true},            \n            {hour:\"19\",      status00_30:true,         status30_60:false},            \n            {hour:\"20\",      status00_30:false,        status30_60:false},            \n            {hour:\"21\",      status00_30:false,        status30_60:false},\n            {hour:\"22\",      status00_30:false,        status30_60:false},            \n            {hour:\"23\",      status00_30:false,        status30_60:false},            \n            {hour:\"24\",      status00_30:false,        status30_60:false},            \n            ])\n\nflow.set (\"hw_schedule_kitchen\",\n            [\n            {hour:\"0\",       status00_30:false,       status30_60:false},\n            {hour:\"1\",       status00_30:false,       status30_60:false},\n            {hour:\"2\",       status00_30:false,       status30_60:false},\n            {hour:\"3\",       status00_30:false,       status30_60:false},\n            {hour:\"4\",       status00_30:false,       status30_60:false},            \n            {hour:\"5\",       status00_30:false,       status30_60:false},            \n            {hour:\"6\",       status00_30:false,        status30_60:true},            \n            {hour:\"7\",       status00_30:true,        status30_60:true},            \n            {hour:\"8\",       status00_30:true,        status30_60:true},            \n            {hour:\"9\",       status00_30:true,        status30_60:true},            \n            {hour:\"10\",      status00_30:true,        status30_60:true},            \n            {hour:\"11\",      status00_30:true,        status30_60:true},            \n            {hour:\"12\",      status00_30:true,        status30_60:true},            \n            {hour:\"13\",      status00_30:true,        status30_60:true},            \n            {hour:\"14\",      status00_30:true,        status30_60:true},            \n            {hour:\"15\",      status00_30:true,        status30_60:true},            \n            {hour:\"16\",      status00_30:true,        status30_60:true},            \n            {hour:\"17\",      status00_30:true,        status30_60:true},            \n            {hour:\"18\",      status00_30:true,        status30_60:true},            \n            {hour:\"19\",      status00_30:true,        status30_60:true},            \n            {hour:\"20\",      status00_30:true,        status30_60:true},            \n            {hour:\"21\",      status00_30:true,        status30_60:true},\n            {hour:\"22\",      status00_30:true,        status30_60:true},            \n            {hour:\"23\",      status00_30:true,        status30_60:false},            \n            {hour:\"24\",      status00_30:false,       status30_60:false},            \n            ])\n            \nflow.set (\"hw_schedule_master\",\n            [\n            {hour:\"0\",       status00_30:false,        status30_60:false},\n            {hour:\"1\",       status00_30:false,        status30_60:false},\n            {hour:\"2\",       status00_30:false,        status30_60:false},\n            {hour:\"3\",       status00_30:false,        status30_60:false},\n            {hour:\"4\",       status00_30:false,        status30_60:false},            \n            {hour:\"5\",       status00_30:false,        status30_60:false},            \n            {hour:\"6\",       status00_30:false,        status30_60:false},            \n            {hour:\"7\",       status00_30:false,         status30_60:false},            \n            {hour:\"8\",       status00_30:false,         status30_60:false},            \n            {hour:\"9\",       status00_30:false,         status30_60:true},            \n            {hour:\"10\",      status00_30:false,        status30_60:false},            \n            {hour:\"11\",      status00_30:false,        status30_60:false},            \n            {hour:\"12\",      status00_30:false,        status30_60:false},            \n            {hour:\"13\",      status00_30:false,        status30_60:false},            \n            {hour:\"14\",      status00_30:false,        status30_60:false},            \n            {hour:\"15\",      status00_30:false,        status30_60:false},            \n            {hour:\"16\",      status00_30:false,        status30_60:false},            \n            {hour:\"17\",      status00_30:false,        status30_60:false},            \n            {hour:\"18\",      status00_30:false,         status30_60:false},            \n            {hour:\"19\",      status00_30:false,         status30_60:false},            \n            {hour:\"20\",      status00_30:false,        status30_60:false},            \n            {hour:\"21\",      status00_30:false,        status30_60:false},\n            {hour:\"22\",      status00_30:false,        status30_60:false},            \n            {hour:\"23\",      status00_30:false,        status30_60:false},            \n            {hour:\"24\",      status00_30:false,        status30_60:false},            \n            ])\n            \nflow.set (\"hw_schedule_garden\",\n            [\n            {hour:\"0\",       status00_30:false,        status30_60:false},\n            {hour:\"1\",       status00_30:false,        status30_60:false},\n            {hour:\"2\",       status00_30:false,        status30_60:false},\n            {hour:\"3\",       status00_30:false,        status30_60:false},\n            {hour:\"4\",       status00_30:false,        status30_60:false},            \n            {hour:\"5\",       status00_30:false,        status30_60:false},            \n            {hour:\"6\",       status00_30:false,        status30_60:false},            \n            {hour:\"7\",       status00_30:false,         status30_60:false},            \n            {hour:\"8\",       status00_30:false,         status30_60:false},            \n            {hour:\"9\",       status00_30:false,         status30_60:false},            \n            {hour:\"10\",      status00_30:false,        status30_60:false},            \n            {hour:\"11\",      status00_30:false,        status30_60:false},            \n            {hour:\"12\",      status00_30:false,        status30_60:false},            \n            {hour:\"13\",      status00_30:false,        status30_60:false},            \n            {hour:\"14\",      status00_30:false,        status30_60:false},            \n            {hour:\"15\",      status00_30:false,        status30_60:false},            \n            {hour:\"16\",      status00_30:false,        status30_60:false},            \n            {hour:\"17\",      status00_30:false,        status30_60:false},            \n            {hour:\"18\",      status00_30:false,         status30_60:false},            \n            {hour:\"19\",      status00_30:false,         status30_60:false},            \n            {hour:\"20\",      status00_30:false,        status30_60:false},            \n            {hour:\"21\",      status00_30:false,        status30_60:false},\n            {hour:\"22\",      status00_30:false,        status30_60:false},            \n            {hour:\"23\",      status00_30:false,        status30_60:false},            \n            {hour:\"24\",      status00_30:false,        status30_60:false},            \n            ])","outputs":1,"noerr":0,"initialize":"","finalize":"","x":710,"y":120,"wires":[[]]},{"id":"60f31fac.52b2c","type":"inject","z":"e9f22dd8.dca23","name":"Running this will delete all user-defined Schedule values","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":300,"y":120,"wires":[["76ff6b15.3982a4"]]},{"id":"e18767ef.34a928","type":"function","z":"e9f22dd8.dca23","name":"Caching","func":"// Replay cache if requested\nif ( msg.hasOwnProperty('cacheControl') && msg.cacheControl === 'REPLAY' ||  msg.cache === true) {\n\n        if ( msg.hasOwnProperty('_socketId') )\n            {\n            node.send({\n                \"hw_values\"             : flow.get(\"hw_values\"),\n                \"schedule_1stloft\"      : flow.get(\"hw_schedule_1stloft\"),\n                \"schedule_kitchen\"      : flow.get(\"hw_schedule_kitchen\"),\n                \"schedule_master\"       : flow.get(\"hw_schedule_master\"),\n                \"schedule_garden\"       : flow.get(\"hw_schedule_garden\"),\n                \"page\"                  : \"hotwater\",\n                \"_socketId\"             : msg._socketId,\n            })\n            }\n        else\n            {\n            node.send({\n                \"hw_values\"             : flow.get(\"hw_values\"),\n                \"schedule_1stloft\"      : flow.get(\"hw_schedule_1stloft\"),\n                \"schedule_kitchen\"      : flow.get(\"hw_schedule_kitchen\"),\n                \"schedule_master\"       : flow.get(\"hw_schedule_master\"),\n                \"schedule_garden\"       : flow.get(\"hw_schedule_garden\"),\n                \"page\"                  : \"hotwater\",\n            })\n            }\n        }\n\n// changes to device values are passed through to uibuilder        \nif (msg.passthrough === true)\n        {\n        node.send({\n            \"hw_values\"             : flow.get(\"hw_values\"),\n            \"page\"                  : \"hotwater\",\n        })\n        }\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":400,"y":1160,"wires":[["d2541d52.5138e","6a887b32.c430e4"]]},{"id":"19a12f32.908eb1","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1970,"y":1160,"wires":[]},{"id":"cbafac67.4781a","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1610,"y":1100,"wires":[]},{"id":"ecc3087d.af0128","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1610,"y":1360,"wires":[]},{"id":"ce0bc9d3.00f0b8","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":890,"y":500,"wires":[]},{"id":"f9858bb6.a13108","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1870,"y":1040,"wires":[]},{"id":"330e802a.30d03","type":"fibaroActor","z":"e9f22dd8.dca23","name":"Pump - Kitchen (Heating Central)","deviceID":"Heating Central/Pump - Kitchen","server":"9c9da376.afac5","events":true,"outputs":2,"x":280,"y":300,"wires":[["c3d5fcc5.937ba","33e6ccef.8d03d4"],["33e6ccef.8d03d4"]]},{"id":"1eef152e.df0feb","type":"fibaroActor","z":"e9f22dd8.dca23","name":"Pump - Master (Heating Central)","deviceID":"Heating Central/Pump - Master","server":"9c9da376.afac5","events":true,"outputs":2,"x":290,"y":360,"wires":[["c3d5fcc5.937ba","f2872771.8cf548"],["f2872771.8cf548"]]},{"id":"97e40d74.7338f","type":"fibaroActor","z":"e9f22dd8.dca23","name":"Pump - Garden (Heating Central)","deviceID":"Heating Central/Pump - Garden","server":"9c9da376.afac5","events":true,"outputs":2,"x":280,"y":420,"wires":[["c3d5fcc5.937ba","f2b4a067.b7a24"],["f2b4a067.b7a24"]]},{"id":"9667923f.4335f","type":"fibaroActor","z":"e9f22dd8.dca23","name":"Pump - 1st-Loft (Heating Central)","deviceID":"Heating Central/Pump - 1st-Loft","server":"9c9da376.afac5","events":true,"outputs":2,"x":280,"y":480,"wires":[["c3d5fcc5.937ba","4fd08aa0.764ac4"],["4fd08aa0.764ac4"]]},{"id":"5f18609.de41ba","type":"fibaroActor","z":"e9f22dd8.dca23","name":"B4_Hot Water (Heating Central)","deviceID":"Heating Central/B4_Hot Water","server":"9c9da376.afac5","events":true,"outputs":2,"x":290,"y":540,"wires":[["c3d5fcc5.937ba","600755bb.663c6c"],["600755bb.663c6c"]]},{"id":"3045c548.76ebaa","type":"fibaroSensor","z":"e9f22dd8.dca23","name":"Temp 1st-Loft Return (Heating Central)","deviceID":"Heating Central/Temp 1st-Loft Return","server":"9c9da376.afac5","events":false,"outputs":1,"x":270,"y":620,"wires":[["c3d5fcc5.937ba"]]},{"id":"c72c674.80cd098","type":"fibaroSensor","z":"e9f22dd8.dca23","name":"Temp Kitchen Return (Heating Central)","deviceID":"Heating Central/Temp Kitchen Return","server":"9c9da376.afac5","events":false,"outputs":1,"x":270,"y":680,"wires":[["c3d5fcc5.937ba"]]},{"id":"f2cb099e.055e58","type":"fibaroSensor","z":"e9f22dd8.dca23","name":"Temp MasterWC Return (Heating Central)","deviceID":"Heating Central/Temp MasterWC Return","server":"9c9da376.afac5","events":false,"outputs":1,"x":260,"y":740,"wires":[["c3d5fcc5.937ba"]]},{"id":"4e427962.a95158","type":"fibaroSensor","z":"e9f22dd8.dca23","name":"Temp Garden Return (Heating Central)","deviceID":"Heating Central/Temp Garden Return","server":"9c9da376.afac5","events":false,"outputs":1,"x":270,"y":800,"wires":[["c3d5fcc5.937ba"]]},{"id":"b148561b.d1a908","type":"fibaroSensor","z":"e9f22dd8.dca23","name":"Temp Cylinder Supply (Heating Central)","deviceID":"Heating Central/Temp Cylinder Supply","server":"9c9da376.afac5","events":false,"outputs":1,"x":270,"y":860,"wires":[["c3d5fcc5.937ba"]]},{"id":"39675f8d.a0b75","type":"fibaroSensor","z":"e9f22dd8.dca23","name":"Temp Boiler Supply (Heating Central)","deviceID":"Heating Central/Temp Boiler Supply","server":"9c9da376.afac5","events":false,"outputs":1,"x":270,"y":920,"wires":[["c3d5fcc5.937ba"]]},{"id":"c175170b.d69d68","type":"link in","z":"e9f22dd8.dca23","name":"","links":["4e66f3cb.2e73ec"],"x":595,"y":400,"wires":[["c3d5fcc5.937ba"]]},{"id":"a1e34ed8.1bfe9","type":"link in","z":"e9f22dd8.dca23","name":"","links":["50b77ab3.cfed94"],"x":595,"y":440,"wires":[["c3d5fcc5.937ba"]]},{"id":"33e6ccef.8d03d4","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":590,"y":180,"wires":[]},{"id":"f2872771.8cf548","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":590,"y":220,"wires":[]},{"id":"f2b4a067.b7a24","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":590,"y":260,"wires":[]},{"id":"4fd08aa0.764ac4","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":590,"y":300,"wires":[]},{"id":"600755bb.663c6c","type":"debug","z":"e9f22dd8.dca23","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":590,"y":340,"wires":[]},{"id":"9c9da376.afac5","type":"fibaro-server","name":"HC2_Master1","ipaddress":"192.168.1.101"}]